<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shio</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-09-19T08:59:57.516Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Chenyang Wan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CS106L: Lec0 Intro</title>
    <link href="http://example.com/2023/09/19/CS106L%20Lec0%20Intro/"/>
    <id>http://example.com/2023/09/19/CS106L%20Lec0%20Intro/</id>
    <published>2023-09-19T05:08:57.367Z</published>
    <updated>2023-09-19T08:59:57.516Z</updated>
    
    <content type="html"><![CDATA[<h2 id="c-types-and-structs">C++ Types and Structs</h2><h3 id="fundamental-types">Fundamental Types</h3><h3 id="dynamic-and-static-typing">Dynamic and Static typing</h3><p>C++ is a <strong>statically typed language.</strong></p><ul><li><code>statically typed</code>: Everything with a name (variables,functions, etc) is <strong>given a type before runtime.</strong>(C++)</li><li><code>dynamically typed</code>: Everything with a name (variables,functions, etc) is <strong>given a type at runtime</strong> based on thething’s current value. (Python)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CRASH during runtime, can’t divide a string</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">div_3</span>(<span class="params">x</span>):</span><br><span class="line"><span class="keyword">return</span> x / <span class="number">3</span> </span><br><span class="line"></span><br><span class="line">div_3(<span class="string">&quot;hello&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Compile error: this code will never run</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">div_3</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">div_3</span>(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>Runtime</code>: Period when program is executing commands(after compilation, if compiled).</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;c-types-and-structs&quot;&gt;C++ Types and Structs&lt;/h2&gt;
&lt;h3 id=&quot;fundamental-types&quot;&gt;Fundamental Types&lt;/h3&gt;
&lt;h3 id=&quot;dynamic-and-static-typing&quot;&gt;Dynamic and Static typing&lt;/h3&gt;
&lt;p&gt;C++ is a &lt;strong&gt;statically typed language.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;statically typed&lt;/code&gt;: Everything with a name (variables,
functions, etc) is &lt;strong&gt;given a type before runtime.&lt;/strong&gt;
(C++)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dynamically typed&lt;/code&gt;: Everything with a name (variables,
functions, etc) is &lt;strong&gt;given a type at runtime&lt;/strong&gt; based on the
thing’s current value. (Python)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# CRASH during runtime, can’t divide a string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;div_3&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x / &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;div_3(&lt;span class=&quot;string&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Compile error: this code will never run&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;div_3&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; x)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x / &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;div_3&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Runtime&lt;/code&gt;: Period when program is executing commands
(after compilation, if compiled).&lt;/p&gt;
</summary>
    
    
    
    
    <category term="Cpp" scheme="http://example.com/tags/Cpp/"/>
    
  </entry>
  
  <entry>
    <title>Debug list: ROS</title>
    <link href="http://example.com/2023/09/19/Debug%20list%20ROS/"/>
    <id>http://example.com/2023/09/19/Debug%20list%20ROS/</id>
    <published>2023-09-19T05:03:43.497Z</published>
    <updated>2023-09-19T05:10:56.652Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <summary type="html">
</summary>
    
    
    
    
    <category term="Debug" scheme="http://example.com/tags/Debug/"/>
    
    <category term="ROS" scheme="http://example.com/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>Debug list: Linux</title>
    <link href="http://example.com/2023/09/19/Debug%20list%20Linux/"/>
    <id>http://example.com/2023/09/19/Debug%20list%20Linux/</id>
    <published>2023-09-19T05:00:34.120Z</published>
    <updated>2023-09-19T05:10:42.512Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <summary type="html">
</summary>
    
    
    
    
    <category term="Debug" scheme="http://example.com/tags/Debug/"/>
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>CS229: Lec1 Supervised Learning</title>
    <link href="http://example.com/2023/09/19/CS229%20Lec1/"/>
    <id>http://example.com/2023/09/19/CS229%20Lec1/</id>
    <published>2023-09-19T01:53:29.923Z</published>
    <updated>2023-09-19T05:10:29.943Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <summary type="html">
</summary>
    
    
    
    
    <category term="MachineLearning" scheme="http://example.com/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>CS106L: Lec1 Stream I</title>
    <link href="http://example.com/2023/09/18/CS106L%20Lec1%20Stream%20I/"/>
    <id>http://example.com/2023/09/18/CS106L%20Lec1%20Stream%20I/</id>
    <published>2023-09-18T12:08:45.236Z</published>
    <updated>2023-09-19T09:22:39.986Z</updated>
    
    <content type="html"><![CDATA[<h2 id="introduction-to-streams">Introduction to streams</h2><p>Abstractly, a <strong>stream</strong> is a sequence of bytes that canbe accessed sequentially. Over time, a stream may produce or consumepotentially unlimited amounts of data. You can imagine stream to be a<strong>character buffer</strong> that automatically interacts with theexternal source. Streams automatically convert variables to a stringform that can be written into a buffer. And the opposite is a similarcase. A string stream is not connected to any external source.</p><h2 id="standard-streams">Standard streams</h2><ul><li><code>cin</code>：</li><li><code>cout</code>：</li><li><code>cerr</code>：</li><li><code>clog</code>：</li><li><h2 id="output-streams">Output streams</h2></li></ul><p>After you initializing an stream (empty, or initialized with a<code>const char*</code> or something else), the position starts at thebeginning of the "buffer". But after your stream insertion, the positionstarts at the end. Here is an example with the<code>std::ostringstream</code> :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> <span class="comment">// for cout</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span>  <span class="comment">// for ostringstream</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// ostringstream is a stream that writes to a string</span></span><br><span class="line"></span><br><span class="line">    <span class="function">std::ostringstream <span class="title">oss1</span><span class="params">(<span class="string">&quot; Hello world. &quot;</span>)</span></span>; <span class="comment">// initialize with string</span></span><br><span class="line">    std::cout &lt;&lt; oss1.<span class="built_in">str</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    std::ostringstream oss2; <span class="comment">// initialize with no string</span></span><br><span class="line">    oss2 &lt;&lt; <span class="string">&quot; Nice 2 meet u. &quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; oss2.<span class="built_in">str</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    oss2 &lt;&lt; <span class="string">&quot; See u tomorrow. &quot;</span> &lt;&lt; std::endl; <span class="comment">// append a string</span></span><br><span class="line">    std::cout &lt;&lt; oss2.<span class="built_in">str</span>() &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And the output is:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello world.</span><br><span class="line">Nice 2 meet u.</span><br><span class="line">Nice 2 meet u. See u tomorrow.</span><br></pre></td></tr></table></figure><h2 id="input-streams">Input streams</h2><p>Now we want to know the behavior of input streams. Take the<code>std::istringstream</code> as an example.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function">std::istringstream <span class="title">iss</span><span class="params">(<span class="string">&quot; Nice to meet u 2. &quot;</span>)</span></span>;</span><br><span class="line">    std::cout &lt;&lt; iss.<span class="built_in">str</span>() &lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    std::string word;</span><br><span class="line">    <span class="type">double</span> number;</span><br><span class="line"></span><br><span class="line">    iss &gt;&gt; word &gt;&gt; number;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;word: &quot;</span> &lt;&lt; word &lt;&lt; std::endl; <span class="comment">// &quot;word: Nice&quot;</span></span><br><span class="line">    std::cout &lt;&lt; iss.<span class="built_in">str</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;number: &quot;</span> &lt;&lt; number &lt;&lt; std::endl; <span class="comment">// &quot;number: ?&quot;</span></span><br></pre></td></tr></table></figure><p>And the output is:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> Nice to meet u 2.</span><br><span class="line">word: Nice</span><br><span class="line"> Nice to meet u 2.</span><br><span class="line">number: 0</span><br></pre></td></tr></table></figure><p>In the example above, the variables read something from the<code>std::istringstream</code>. But clearly the <em>number</em> failedto read the value expected. Now we modify the <em>iss</em> a little.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function">std::istringstream <span class="title">iss</span><span class="params">(<span class="string">&quot; Nice 2 meet u too. &quot;</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>And now the output is:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> Nice to meet u 2.</span><br><span class="line">word: Nice</span><br><span class="line"> Nice to meet u 2.</span><br><span class="line">number: 2</span><br></pre></td></tr></table></figure><h2 id="locate-and-set-the-position">Locate and set the position</h2><p>We use the method <code>tellp()</code> to get the position,<code>std::stream()</code> to create offset, and the<code>seekp()</code> to set a new position in the stream <code>ss</code>in the example below. These methods let you to manually set theposition, and most useful is the offset can be <strong>added</strong> topositions. But remember that <strong>the position can never be less than0</strong>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    std::fpos pos = ss.<span class="built_in">tellp</span>() + std::<span class="built_in">streamoff</span>(<span class="number">3</span>); <span class="comment">// get position</span></span><br><span class="line">    ss.<span class="built_in">seekp</span>(pos); <span class="comment">// set position</span></span><br></pre></td></tr></table></figure><h2 id="state-bits">State bits</h2><p>There four bits to indicate the state of the stream.</p><ol type="1"><li><code>Good bit</code>: Ready for read/write. Nothing unusual, onwhen <strong>other bits are off</strong>.</li><li><code>Fail bit</code>: Previous operation failed, all futureoperations <strong>frozen</strong>. Like:<ul><li>Type mismatch</li><li>File can't be opened</li><li>Seeking failed</li></ul></li><li><code>EOF bit</code>: Previous operation reached the end of thebuffer content. Nothing left.</li><li><code>Bad bit</code>: External error, likely irrecoverable. Couldnot move characters from external source (e.g. the file you are readingfrom is suddenly deleted).</li></ol><p><strong>Caution</strong> - <code>Good</code> and <code>Fail</code>are not opposite, and <code>Good</code> and <code>Bad</code> are notopposite. - <code>Fail</code> and <code>EOF</code> are normally you willbe checking. - You will rarely use <code>Good</code>. -</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printStreamState</span><span class="params">(std::ostream &amp; os)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;good: &quot;</span> &lt;&lt; os.<span class="built_in">good</span>() &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;fail: &quot;</span> &lt;&lt; os.<span class="built_in">fail</span>() &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;eof: &quot;</span> &lt;&lt; os.<span class="built_in">eof</span>() &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;bad: &quot;</span> &lt;&lt; os.<span class="built_in">bad</span>() &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>So far, we have been using the <strong>iostream</strong> standardlibrary, whichprovides <code>std::cin</code> and <code>std::cout</code> methods forreading from standard input and writing to standard outputrespectively.</p><table><colgroup><col style="width: 52%" /><col style="width: 48%" /></colgroup><thead><tr class="header"><th style="text-align: center;">library name</th><th style="text-align: left;">Description</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">ofstream</td><td style="text-align: left;">This data type represents the output filestream and is used to create files and to write information tofiles.</td></tr><tr class="even"><td style="text-align: center;">ifstream</td><td style="text-align: left;">This data type represents the input filestream and is used to read information from files.</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;introduction-to-streams&quot;&gt;Introduction to streams&lt;/h2&gt;
&lt;p&gt;Abstractly, a &lt;strong&gt;stream&lt;/strong&gt; is a sequence of bytes that can
be accessed sequentially. Over time, a stream may produce or consume
potentially unlimited amounts of data. You can imagine stream to be a
&lt;strong&gt;character buffer&lt;/strong&gt; that automatically interacts with the
external source. Streams automatically convert variables to a string
form that can be written into a buffer. And the opposite is a similar
case. A string stream is not connected to any external source.&lt;/p&gt;
&lt;h2 id=&quot;standard-streams&quot;&gt;Standard streams&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cin&lt;/code&gt;：&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cout&lt;/code&gt;：&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cerr&lt;/code&gt;：&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clog&lt;/code&gt;：&lt;/li&gt;
&lt;li&gt;&lt;h2 id=&quot;output-streams&quot;&gt;Output streams&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After you initializing an stream (empty, or initialized with a
&lt;code&gt;const char*&lt;/code&gt; or something else), the position starts at the
beginning of the &quot;buffer&quot;. But after your stream insertion, the position
starts at the end. Here is an example with the
&lt;code&gt;std::ostringstream&lt;/code&gt; :&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// for cout&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// for ostringstream&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// ostringstream is a stream that writes to a string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;std::ostringstream &lt;span class=&quot;title&quot;&gt;oss1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot; Hello world. &amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// initialize with string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std::cout &amp;lt;&amp;lt; oss1.&lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt;() &amp;lt;&amp;lt; std::endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std::ostringstream oss2; &lt;span class=&quot;comment&quot;&gt;// initialize with no string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    oss2 &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot; Nice 2 meet u. &amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std::cout &amp;lt;&amp;lt; oss2.&lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt;() &amp;lt;&amp;lt; std::endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    oss2 &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;quot; See u tomorrow. &amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl; &lt;span class=&quot;comment&quot;&gt;// append a string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std::cout &amp;lt;&amp;lt; oss2.&lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt;() &amp;lt;&amp;lt; std::endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;And the output is:&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Hello world.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Nice 2 meet u.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Nice 2 meet u. See u tomorrow.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;input-streams&quot;&gt;Input streams&lt;/h2&gt;
&lt;p&gt;Now we want to know the behavior of input streams. Take the
&lt;code&gt;std::istringstream&lt;/code&gt; as an example.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Cpp" scheme="http://example.com/tags/Cpp/"/>
    
  </entry>
  
</feed>
